package main

import "math"

/*
Given two strings, S1 and S2, the task is to find the length of the longest subsequence present in both of the strings.
Note: A subsequence of a string is a sequence that is generated by deleting some characters (possibly 0)
from the string without altering the order of the remaining characters.
For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, etc are subsequences of the string “abcdefg”.
Examples:
    Input: S1 = “AGGTAB”, S2 = “GXTXAYB”
    Output: 4
    Explanation: The longest subsequence which is present in both strings is “GTAB”.

*/

func main() {
	s1 := "AGGTAB"
	s2 := "GXTXAYB"
	println("Longest common subsequence: ", longestCommonSubsequence(s1, s2, len(s1), len(s2)))
}

func longestCommonSubsequence(s1 string, s2 string, l1 int, l2 int) int {

	if l1 == 0 || l2 == 0 {
		return 0
	}

	dp := make([][]int, l1+1)
	for i := 0; i < l1+1; i++ {
		dp[i] = make([]int, l2+1)
	}
	for i := 1; i <= l1; i++ {
		for j := 1; j <= l2; j++ {
			if s1[i-1] == s2[j-1] {
				dp[i][j] = dp[i-1][j-1] + 1
			} else {
				dp[i][j] = int(math.Max(float64(dp[i][j-1]), float64(dp[i-1][j])))
			}
		}
	}
	return dp[l1][l2]
}
